/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DarkPDFViewer
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DarkPDFViewer = class extends import_obsidian.Plugin {
  async onload() {
    this.registerEvent(
      this.app.workspace.on(
        "file-open",
        async (file) => {
          this.addInversionClass(file);
        }
      )
    );
  }
  addInversionClass(file) {
    if (file !== null) {
      if (file.extension === "pdf") {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian.FileView);
        if (view && view.file === file) {
          const container = view.containerEl;
          container.style.opacity = "0";
          if (file.basename.endsWith(".invert")) {
            container.classList.add("inverted-pdf");
          } else {
            container.classList.remove("inverted-pdf");
          }
          setTimeout(() => {
            container.style.opacity = "1";
          }, 300);
        }
      }
    }
  }
  onunload() {
    const leaves = this.app.workspace.getLeavesOfType("pdf");
    leaves.forEach((leaf) => {
      const container = leaf.view.containerEl;
      container.classList.remove("inverted-pdf");
      container.style.opacity = "1";
    });
  }
};
